name: CI Tests with Docker (CI:test-docker / Local:test)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    # GitHub Actions가 DB 컨테이너를 대신 띄워줌 (앱은 호스트에서 테스트)
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: gear4camp_test
          TZ: Asia/Seoul
        ports:
          - 3306:3306
        # 헬스체크: MySQL이 TCP로 응답할 때까지 대기
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot --protocol=TCP"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30
          --health-start-period=10s

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        # v4도 OK. 네가 v3 쓰고 있으면 v3로 둬도 됨.
        uses: actions/checkout@v4

      # 2) JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3) gradlew 권한
      - name: Grant execute for gradlew
        run: chmod +x ./gradlew

      # 4) Gradle 캐시(속도↑)
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5) 테스트 실행 (호스트에서 실행, DB는 서비스 컨테이너)
      #    - URL만 127.0.0.1:3306으로 덮어쓰기 -> 코드/프로퍼티 수정 불필요
      - name: Run tests (host → MySQL service)
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/gear4camp_test?serverTimezone=UTC&characterEncoding=UTF-8
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
        run: |
          ./gradlew test --no-daemon \
            -Dspring.profiles.active=test-docker \
            -Dorg.gradle.workers.max=1 \
            -Dorg.gradle.parallel=false

      # 6) 실패 시 디버그(선택)
      - name: Debug on failure
        if: failure()
        run: |
          echo "==== MySQL container logs (tail 200) ===="
          docker logs ${{ job.services.mysql.id }} --tail=200 || true