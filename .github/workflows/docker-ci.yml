name: CI/CD with Docker

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # docker-compose 설치(github Actions의 ubuntu-latest환경에서는 docker는 기본적으로 설치되어있지만, docker-compose는 별도 설치 필요)
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # 4. 테스트용 MySQL 컨테이너 실행    CI/CD 환경에서 DB를 미리 띄워 테스트 시 DB 연결 오류 방지를 위한 코드
      # CI/CD 진행 시 로컬 DB와 컨테이너 DB 각각 바라보는 DB가 다르기에 문제가 생겼음. 해당 명령어로 해결 가능해보임
      - name: Start MySQL for testing
        run: docker-compose -f docker-compose.test.yml up -d

      # 4. MySQL 준비 대기
      - name: Wait for MySQL
        run: sleep 30

      # 5. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 6. 테스트 환경 설정(가시성을 위해 추가 및 테스트와 빌드를 분리해서 관리를 용이하게 사용하기 위함)
      - name: Test with Gradle
        run: ./gradlew clean test
        env:
            SPRING_PROFILES_ACTIVE: test

      # 7. Docker 로그인 (GitHub Secrets 사용)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 8. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t jinyeonseok/gear4camp:latest .

      # 9. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push jinyeonseok/gear4camp:latest