name: CI Tests with Docker (CI:test-docker / Local:test)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4) Gradle 캐시
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5) 테스트 제외 빌드 (테스트 컨테이너에 jar 복사용)
      - name: Build JAR (skip tests)
        run: ./gradlew clean build -x test

      # 6) 테스트용 이미지 빌드
      - name: Build test images
        run: docker compose -f docker-compose.test.yml build

      # 7) DB만 먼저 기동 + healthcheck까지 대기
      - name: Start DB (wait for healthy)
        run: |
          docker compose -f docker-compose.test.yml up -d --wait mysql-test
          docker compose -f docker-compose.test.yml ps

      # 8) 프로필 파일 존재 & JDBC URL 확인
      - name: Pre-check profile & JDBC URL
        run: |
          test -f src/test/resources/application-test-docker.properties
          echo "=== URL check ==="
          grep -n "spring.datasource.url=jdbc:mysql://mysql-test:3306" src/test/resources/application-test-docker.properties

      # 9) app-test 컨테이너 관점에서 DNS/TCP 연결 체크
      - name: Pre-check DNS/TCP from app-test
        run: |
          docker compose -f docker-compose.test.yml exec -T mysql-test \
          mysqladmin ping -h 127.0.0.1 -uroot -proot --protocol=TCP

      # 10) 실제 Gradle 테스트 실행
      - name: Run tests (CI uses test-docker profile)
        env:
          GRADLE_OPTS: "-Xmx512m -Dorg.gradle.jvmargs='-Xmx512m -XX:MaxMetaspaceSize=256m -Dfile.encoding=UTF-8'"
        run: |
          docker compose -f docker-compose.test.yml run --rm -T \
            --entrypoint "" \
            -w /app \
            app-test \
            ./gradlew clean test --no-daemon \
            -Dspring.profiles.active=test-docker \
            -Dorg.gradle.workers.max=1

      # 11) 실패 시 디버그 로그 덤프
      - name: Debug on failure
        if: failure()
        run: |
          echo "==== docker compose ps ===="
          docker compose -f docker-compose.test.yml ps || true
          echo "==== mysql-test logs (tail 200) ===="
          docker compose -f docker-compose.test.yml logs mysql-test --tail=200 || true
          echo "==== app-test logs (tail 200; run 컨테이너는 종료될 수 있음) ===="
          docker compose -f docker-compose.test.yml logs app-test --tail=200 || true

      # 12) 정리
      - name: Shutdown services
        if: always()
        run: docker compose -f docker-compose.test.yml down -v